#!/bin/bash

mkdir -p filebeat_application_logs/data
mkdir -p filebeat_access_logs/data
mkdir -p logstash/dead_letter_queue

docker-compose up -d elasticsearch kibana

ELASTIC_USERNAME="elastic"
ELASTIC_PASSWORD="changeme"
ES_URL="http://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@localhost:9200"
KIBANA_URL="http://localhost:5601"

# Wait for Elasticsearch to start
echo -n Waiting for Elasticsearch to start...
until curl -s $ES_URL -o /dev/null; do
    sleep 1
    echo -n .
done
echo

# X-pack
echo Activating X-Pack trail
curl -s -H 'Content-Type:application/json' \
     -X POST $ES_URL/_xpack/license/start_trial?acknowledge=true \
     -o /dev/null
echo Setting password for Logstash
curl -s -H 'Content-Type:application/json' \
     -X PUT $ES_URL/_xpack/security/user/logstash_system/_password \
     -d "{\"password\": \"${ELASTIC_PASSWORD}\"}" -o /dev/null

# Add mapping templates
echo Adding application logs index template to Elasticsearch
curl -s -H 'Content-Type: application/json' \
     -X PUT $ES_URL/_template/application_template \
     -d @elasticsearch/application_template.json -o /dev/null
echo Adding access logs index template to Elasticsearch
curl -s -H 'Content-Type: application/json' \
     -X PUT $ES_URL/_template/access_template \
     -d @elasticsearch/access_template.json -o /dev/null

# Wait for Kibana to start (waiting until API returns code 200)
echo -n Waiting for Kibana to start...
until [ `curl -s -o /dev/null -w "%{http_code}" -u $ELASTIC_USERNAME:$ELASTIC_PASSWORD \
      $KIBANA_URL/api/saved_objects/_find?type=index-pattern` == "200" ]; do
    sleep 1
    echo -n .
done
echo

# Add Kibana index pattern, dashboard
echo Adding saved objects to Kibana
curl -s -H 'kbn-xsrf: true' -H 'Content-Type: application/json' \
     -X POST -u $ELASTIC_USERNAME:$ELASTIC_PASSWORD \
     $KIBANA_URL/api/saved_objects/_bulk_create \
     -d @kibana/saved_objects/export.json -o /dev/null

docker-compose stop elasticsearch kibana
