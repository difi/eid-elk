input {
  file {
    path => ["/mnt/logs/StatusAndAudit_source.json"]
    sincedb_path => "/dev/null"
    start_position => "beginning"
  }
}

filter {

  # Convert json string in message to actual json object
  json {
    source => "message"
  }

  # Add short_message field required by gelf
  mutate {
    add_field => {
      "short_message" => "%{message}"
    }
  }

  # Save timestamp of event, this replaces timestamp in a Graylog pipeline
  date {
    locale => "en"
    match => ["timestamp", "YYYY-MM-dd HH:mm:ss.SSS"]
    timezone => "Europe/Oslo"
    target => "event_timestamp"
  }

  # Convert XML in soap_fault to actual datastructure
  xml {
    source => "soap_fault"
    target => "soap_fault_parsed"
  }

  # Convert payload-size to KB
  if [payload-size] {

    # Extract payload size number and unit
    grok {
      match => {
        "payload-size" => '%{WORD:payload_size:float} %{WORD:payload_unit}'
      }
    }

    # Convert payload size to KB and store in field payload_size_in_KB
    ruby {
      code => "
        if event.get('[payload_unit]') == 'byte'
          event.set('[payload_size_in_KB]', event.get('[payload_size]')/1e+3)
        elsif event.get('[payload_unit]') == 'KB'
          event.set('[payload_size_in_KB]', event.get('[payload_size]'))
        elsif event.get('[payload_unit]') == 'MB'
          event.set('[payload_size_in_KB]', event.get('[payload_size]')*1e+3)
        elsif event.get('[payload_unit]') == 'GB'
          event.set('[payload_size_in_KB]', event.get('[payload_size]')*1e+6)
        else
          event.set('[payload_size_in_KB]', -1.0)
        end
        "
    }

    # Remove old payload-size field
    mutate {
      remove_field => ["payload-size", "payload_size", "payload_unit"]
    }

  }

}

output {
  gelf {
    host => "graylog"
  }
}